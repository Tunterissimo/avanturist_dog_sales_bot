import time
import logging
import os
from contextlib import contextmanager
from functools import lru_cache
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
import gspread
from google.oauth2.service_account import Credentials
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = os.environ["BOT_TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
DATABASE_URL = os.environ["DATABASE_URL"]
CREDENTIALS_JSON = os.environ["CREDENTIALS"]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_TTL_SECONDS = 300  # 5 –º–∏–Ω—É—Ç

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Google Sheets
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
SHEET_NAME = "–ü—Ä–æ–¥–∞–∂–∏"
NEW_SHEET_NAME = "–ü—Ä–æ–¥–∞–∂–∏ - new"
PRODUCT_SHEET_NAME = "–ü—Ä–æ–¥—É–∫—Ü–∏—è"
CATALOG_SHEET_NAME = "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"
CHANNELS_SHEET_NAME = "–ö–∞–Ω–∞–ª—ã"
REFERENCE_SHEET_NAME = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
PRODUCT_TYPES_HEADER = "–¢–ò–ü–´ –¢–û–í–ê–†–û–í"
WIDTHS_HEADER = "–®–ò–†–ò–ù–´ –°–¢–†–û–ü"
COLOR_TYPES_HEADER = "–¢–ò–ü–´ –†–ê–°–¶–í–ï–¢–û–ö"
COLORS_HEADER = "–†–ê–°–¶–í–ï–¢–ö–ò"


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def clean_numeric_value(value):
    """–û—á–∏—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not value:
        return "0"

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if isinstance(value, (int, float)):
        return str(value)

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    cleaned = (
        value.replace("—Ä.", "").replace(" ", "").replace("\xa0", "").replace(",", ".")
    )
    return cleaned.strip()


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log"),
    ],
)
logger = logging.getLogger(__name__)


# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode="require")
        logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        yield conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()


@contextmanager
def get_db_cursor():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –∫—É—Ä—Å–æ—Ä, –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    with get_db_connection() as conn:
        cur = conn.cursor(cursor_factory=RealDictCursor)
        try:
            yield cur
            conn.commit()
        except Exception as e:
            conn.rollback()
            raise e
        finally:
            cur.close()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    try:
        with get_db_cursor() as cur:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute("DROP TABLE IF EXISTS user_states")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute(
                """
                CREATE TABLE user_states (
                    user_id BIGINT PRIMARY KEY,
                    channel VARCHAR(50),
                    product_type VARCHAR(50),
                    width VARCHAR(20),
                    size VARCHAR(20),
                    color_type VARCHAR(50),
                    color VARCHAR(50),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


# ==================== GOOGLE SHEETS ====================
# –ü–∞—Ä—Å–∏–º JSON credentials
credentials_info = json.loads(CREDENTIALS_JSON)


@lru_cache(maxsize=1)
def get_google_sheet_cached():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏—Å—Ç Google Sheets —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        creds = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)

        logger.info("‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return worksheet
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        raise


@lru_cache(maxsize=1)
def get_channels_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        sheet = get_google_sheet_cached()

        try:
            channels_sheet = sheet.spreadsheet.worksheet(CHANNELS_SHEET_NAME)
            logger.info("‚úÖ –õ–∏—Å—Ç '–ö–∞–Ω–∞–ª—ã' –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '–ö–∞–Ω–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return []

        all_data = channels_sheet.get_all_values()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –ª–∏—Å—Ç–∞ '–ö–∞–Ω–∞–ª—ã': {len(all_data)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        channels_data = all_data[1:] if len(all_data) > 1 else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_list = []
        for row in channels_data:
            if len(row) >= 2 and row[0] and row[1]:
                channels_list.append(row[1].strip())

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤: {channels_list}")
        return channels_list

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []


@lru_cache(maxsize=1)
def get_reference_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        sheet = get_google_sheet_cached()

        try:
            ref_sheet = sheet.spreadsheet.worksheet(REFERENCE_SHEET_NAME)
            all_data = ref_sheet.get_all_values()
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '{REFERENCE_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return {}

        reference_data = {
            "product_types": [],
            "widths": [],
            "color_types": [],
            "colors": [],
        }

        current_section = None

        for row in all_data:
            if not any(row):
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
            if PRODUCT_TYPES_HEADER in row[0]:
                current_section = "product_types"
                continue
            elif WIDTHS_HEADER in row[0]:
                current_section = "widths"
                continue
            elif COLOR_TYPES_HEADER in row[0]:
                current_section = "color_types"
                continue
            elif COLORS_HEADER in row[0]:
                current_section = "colors"
                continue

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
            if current_section == "product_types" and len(row) >= 3:
                if row[0] and row[0] != "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    reference_data["product_types"].append(
                        {
                            "type": row[0].strip(),
                            "has_width": row[1].strip().lower() == "–¥–∞",
                            "has_size": row[2].strip().lower() == "–¥–∞",
                        }
                    )

            elif current_section == "widths" and len(row) >= 2:
                if row[0] and row[0] != "–®–∏—Ä–∏–Ω–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    available_sizes = (
                        [s.strip() for s in row[1].split(",")] if row[1] else []
                    )
                    reference_data["widths"].append(
                        {"width": row[0].strip(), "available_sizes": available_sizes}
                    )

            elif current_section == "color_types" and len(row) >= 2:
                if row[0] and row[0] != "–¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    available_colors = (
                        [c.strip() for c in row[1].split(",")] if row[1] else []
                    )
                    reference_data["color_types"].append(
                        {"type": row[0].strip(), "available_colors": available_colors}
                    )

            elif current_section == "colors" and row[0]:
                if row[0] != "–†–∞—Å—Ü–≤–µ—Ç–∫–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    reference_data["colors"].append(row[0].strip())

        logger.info(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_data['product_types'])} —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤, "
            f"{len(reference_data['widths'])} —à–∏—Ä–∏–Ω, {len(reference_data['color_types'])} —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫, "
            f"{len(reference_data['colors'])} —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫"
        )

        return reference_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
        return {}


def get_product_price_from_catalog(product_type, width, size, color_type, color):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –¥–ª—è: {product_type}, {width}, {size}, {color_type}, {color}")
        logger.info(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {len(all_data)}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 8:
                continue
                
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if i <= 10:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                logger.info(f"–°—Ç—Ä–æ–∫–∞ {i}: {row}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            catalog_product_type = row[2].strip() if len(row) > 2 else ""
            catalog_width = row[3].strip() if len(row) > 3 else ""
            catalog_size = row[4].strip() if len(row) > 4 else ""
            catalog_color_type = row[5].strip() if len(row) > 5 else ""
            catalog_color = row[6].strip() if len(row) > 6 else ""
            catalog_price = row[7].strip() if len(row) > 7 else ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏)
            type_match = catalog_product_type == product_type
            width_match = (not width) or (catalog_width == width) or (width == "" and catalog_width == "")
            size_match = (not size) or (catalog_size == size) or (size == "" and catalog_size == "")
            color_type_match = catalog_color_type == color_type
            color_match = catalog_color == color
            
            if (type_match and width_match and size_match and 
                color_type_match and color_match and catalog_price):
                
                price_value = float(clean_numeric_value(catalog_price))
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {price_value} —Ä—É–±. –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {i}")
                return price_value
        
        logger.warning(f"‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: {product_type}, {width}, {size}, {color_type}, {color}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 8:
                continue
                
            catalog_product_type = row[2].strip() if len(row) > 2 else ""
            catalog_color_type = row[5].strip() if len(row) > 5 else ""
            catalog_color = row[6].strip() if len(row) > 6 else ""
            catalog_price = row[7].strip() if len(row) > 7 else ""
            
            if (catalog_product_type == product_type and 
                catalog_color_type == color_type and 
                catalog_color == color and 
                catalog_price):
                
                price_value = float(clean_numeric_value(catalog_price))
                logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {price_value} —Ä—É–±.")
                return price_value
        
        logger.error(f"‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞–∂–µ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã: {e}")
        return 0


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def sales_channels_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø—Ä–æ–¥–∞–∂ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã"""
    try:
        channels = get_channels_from_sheet()
        keyboard = []

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(channels), 2):
            row = []
            row.append(InlineKeyboardButton(channels[i], callback_data=channels[i]))

            if i + 1 < len(channels):
                row.append(
                    InlineKeyboardButton(channels[i + 1], callback_data=channels[i + 1])
                )

            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        return InlineKeyboardMarkup(keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def product_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for product_type in ref_data["product_types"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        product_type["type"],
                        callback_data=f"type_{product_type['type']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def widths_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —à–∏—Ä–∏–Ω–∞–º–∏ —Å—Ç—Ä–æ–ø"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for width_data in ref_data["widths"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        width_data["width"],
                        callback_data=f"width_{width_data['width']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —à–∏—Ä–∏–Ω: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def sizes_keyboard(selected_width):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        width_data = next(
            (w for w in ref_data["widths"] if w["width"] == selected_width), None
        )

        if width_data:
            for size in width_data["available_sizes"]:
                keyboard.append(
                    [InlineKeyboardButton(size, callback_data=f"size_{size}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def color_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for color_type in ref_data["color_types"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        color_type["type"],
                        callback_data=f"colortype_{color_type['type']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def colors_keyboard(selected_color_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        color_type_data = next(
            (ct for ct in ref_data["color_types"] if ct["type"] == selected_color_type),
            None,
        )

        if color_type_data:
            for color in color_type_data["available_colors"]:
                keyboard.append(
                    [InlineKeyboardButton(color, callback_data=f"color_{color}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.message.from_user.first_name
    help_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂.

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report
"""
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    user_id = update.message.from_user.id

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        with get_db_cursor() as cur:
            cur.execute(
                "INSERT INTO user_states (user_id, channel, product_type, width, size, color_type, color) VALUES (%s, NULL, NULL, NULL, NULL, NULL, NULL) ON CONFLICT (user_id) DO UPDATE SET channel = NULL, product_type = NULL, width = NULL, size = NULL, color_type = NULL, color = NULL",
                (user_id,),
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –≤ add_entry: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—è–æ–π
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂:", reply_markup=sales_channels_keyboard()
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    await query.answer()

    try:
        with get_db_cursor() as cur:
            cur.execute("SELECT * FROM user_states WHERE user_id = %s", (user_id,))
            user_state = cur.fetchone()

            if not user_state:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /add")
                return

            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –ö–ê–ù–ê–õ–ê –ü–†–û–î–ê–ñ
            if data in get_channels_from_sheet():
                cur.execute(
                    "UPDATE user_states SET channel = %s, product_type = NULL, width = NULL, size = NULL, color_type = NULL, color = NULL WHERE user_id = %s",
                    (data, user_id),
                )
                await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {data}")
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=product_types_keyboard()
                )

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –¢–ò–ü–ê –¢–û–í–ê–†–ê
            elif data.startswith("type_"):
                product_type = data.split("_", 1)[1]
                ref_data = get_reference_data()
                product_type_data = next(
                    (
                        pt
                        for pt in ref_data["product_types"]
                        if pt["type"] == product_type
                    ),
                    None,
                )

                if not product_type_data:
                    await query.edit_message_text("‚ùå –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                cur.execute(
                    "UPDATE user_states SET product_type = %s, width = NULL, size = NULL WHERE user_id = %s",
                    (product_type, user_id),
                )

                await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: {product_type}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞
                if product_type in ["–õ–µ–∂–∞–Ω–∫–∞", "–ë—É—Å—ã"]:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ —Ä–∞–∑–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∏–ø—É —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
                    await query.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:", reply_markup=color_types_keyboard()
                    )
                elif product_type_data["has_width"]:
                    await query.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–ø—ã:", reply_markup=widths_keyboard()
                    )
                else:
                    await query.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:", reply_markup=color_types_keyboard()
                    )

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –®–ò–†–ò–ù–´
            elif data.startswith("width_"):
                width = data.split("_", 1)[1]
                cur.execute(
                    "UPDATE user_states SET width = %s, size = NULL WHERE user_id = %s",
                    (width, user_id),
                )

                await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞: {width}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä
                cur.execute(
                    "SELECT product_type FROM user_states WHERE user_id = %s",
                    (user_id,),
                )
                product_type = cur.fetchone()["product_type"]
                ref_data = get_reference_data()
                product_type_data = next(
                    (
                        pt
                        for pt in ref_data["product_types"]
                        if pt["type"] == product_type
                    ),
                    None,
                )

                if product_type_data and product_type_data["has_size"]:
                    await query.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=sizes_keyboard(width)
                    )
                else:
                    await query.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:", reply_markup=color_types_keyboard()
                    )

            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –†–ê–ó–ú–ï–†–ê
            elif data.startswith("size_"):
                size = data.split("_", 1)[1]
                cur.execute(
                    "UPDATE user_states SET size = %s WHERE user_id = %s",
                    (size, user_id),
                )

                await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: {size}")
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:", reply_markup=color_types_keyboard()
                )

            # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –¢–ò–ü–ê –†–ê–°–¶–í–ï–¢–ö–ò
            elif data.startswith("colortype_"):
                color_type = data.split("_", 1)[1]
                cur.execute(
                    "UPDATE user_states SET color_type = %s, color = NULL WHERE user_id = %s",
                    (color_type, user_id),
                )

                await query.edit_message_text(
                    text=f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏: {color_type}"
                )
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É:", reply_markup=colors_keyboard(color_type)
                )

            # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –†–ê–°–¶–í–ï–¢–ö–ò
            elif data.startswith("color_"):
                color = data.split("_", 1)[1]
                cur.execute(
                    "UPDATE user_states SET color = %s WHERE user_id = %s",
                    (color, user_id),
                )

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                cur.execute("SELECT * FROM user_states WHERE user_id = %s", (user_id,))
                user_state = cur.fetchone()

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞: "
                        f"–¢–∏–ø={user_state['product_type']}, "
                        f"–®–∏—Ä–∏–Ω–∞={user_state['width']}, "
                        f"–†–∞–∑–º–µ—Ä={user_state['size']}, "
                        f"–¢–∏–ø–†–∞—Å—Ü–≤–µ—Ç–∫–∏={user_state['color_type']}, "
                        f"–†–∞—Å—Ü–≤–µ—Ç–∫–∞={user_state['color']}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                product_name_parts = [user_state["product_type"]]
                if user_state["width"]:
                    product_name_parts.append(user_state["width"])
                if user_state["size"]:
                    product_name_parts.append(user_state["size"])
                product_name_parts.append(user_state["color_type"])
                product_name_parts.append(user_state["color"])

                product_name = " ".join(product_name_parts)

                # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É
                price = get_product_price_from_catalog(
                    user_state["product_type"],
                    user_state["width"],
                    user_state["size"],
                    user_state["color_type"],
                    user_state["color"],
                )

                await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞: {color}")
                await query.message.reply_text(
                    f"üéØ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã!\n\n"
                    f"*–¢–æ–≤–∞—Ä:* {product_name}\n"
                    f"*–¶–µ–Ω–∞:* {price:.2f} —Ä—É–±.\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                    parse_mode="Markdown",
                )

            # 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ –û–¢–ú–ï–ù–´
            elif data == "cancel":
                cur.execute(
                    "UPDATE user_states SET channel = NULL, product_type = NULL, width = NULL, size = NULL, color_type = NULL, color = NULL WHERE user_id = %s",
                    (user_id,),
                )
                await query.edit_message_text(text="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
                await query.edit_message_text(text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================
async def handle_quantity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    user_message = update.message.text
    user_id = update.message.from_user.id

    try:
        with get_db_cursor() as cur:
            cur.execute("SELECT * FROM user_states WHERE user_id = %s", (user_id,))
            user_state = cur.fetchone()

        if not user_state or not all(
            [
                user_state["channel"],
                user_state["product_type"],
                user_state["color_type"],
                user_state["color"],
            ]
        ):
            await update.message.reply_text(
                "‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /add"
            )
            return

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        try:
            quantity = float(user_message.strip().replace(",", "."))
            if quantity <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return

            # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É
            price = get_product_price_from_catalog(
                user_state["product_type"],
                user_state["width"],
                user_state["size"],
                user_state["color_type"],
                user_state["color"],
            )

            total_amount = quantity * price

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product_name_parts = [user_state["product_type"]]
            if user_state["width"]:
                product_name_parts.append(user_state["width"])
            if user_state["size"]:
                product_name_parts.append(user_state["size"])
            product_name_parts.append(user_state["color_type"])
            product_name_parts.append(user_state["color"])
            product_name = " ".join(product_name_parts)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            sheet = get_google_sheet_cached()
            new_sheet = sheet.spreadsheet.worksheet(NEW_SHEET_NAME)

            row_data = [
                user_state["channel"],
                user_state["product_type"],
                user_state["width"] or "",
                user_state["size"] or "",
                user_state["color_type"],
                user_state["color"],
                quantity,
                price,
                total_amount,
                datetime.now().strftime("%d.%m.%Y"),
            ]

            new_sheet.append_row(row_data, value_input_option="USER_ENTERED")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"""‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É!

*–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂:* {user_state["channel"]}
*–¢–æ–≤–∞—Ä:* {product_name}
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}
*–¶–µ–Ω–∞:* {price:.2f} —Ä—É–±.
*–°—É–º–º–∞:* {total_amount:.2f} —Ä—É–±.
"""
            await update.message.reply_text(success_text, parse_mode="Markdown")
            logger.info(f"üë§ User {user_id} added new record: {row_data}")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with get_db_cursor() as cur:
                cur.execute(
                    "UPDATE user_states SET channel = NULL, product_type = NULL, width = NULL, size = NULL, color_type = NULL, color = NULL WHERE user_id = %s",
                    (user_id,),
                )

        except ValueError:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: `2` –∏–ª–∏ `1.5`",
                parse_mode="Markdown",
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ==================== –û–¢–ß–ï–¢–´ ====================
async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    try:
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂", callback_data="report_channels"
                )
            ],
            [
                InlineKeyboardButton(
                    "üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="report_products"
                )
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_report: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")


async def handle_report_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    data = query.data

    await query.answer()

    if data == "report_channels":
        await generate_channels_report(query)
    elif data == "report_products":
        await generate_products_report(query)
    elif data == "report_cancel":
        await query.edit_message_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def generate_channels_report(query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂"""
    try:
        sheet = get_google_sheet_cached()
        all_data = sheet.get_all_values()

        logger.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(all_data)}")
        if len(all_data) > 1:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {all_data[1:4]}")

        if len(all_data) <= 1:
            await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        headers = all_data[0]
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")
        try:
            channel_idx = headers.index("–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂")
            product_idx = headers.index("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            qty_idx = headers.index("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            price_idx = headers.index("–¶–µ–Ω–∞")
            amount_idx = headers.index("–°—É–º–º–∞")
        except ValueError as e:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –∫–æ–ª–æ–Ω–∫–∞: {e}. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
            )
            return

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        sales_data = []
        for row in all_data[1:]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not any(row) or len(row) < 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ 6 –∫–æ–ª–æ–Ω–æ–∫
                continue

            try:
                # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                cleaned_qty = clean_numeric_value(row[qty_idx])
                cleaned_amount = clean_numeric_value(row[amount_idx])
                cleaned_price = (
                    clean_numeric_value(row[price_idx])
                    if len(row) > price_idx and row[price_idx]
                    else "0"
                )

                sales_data.append(
                    {
                        "channel": row[channel_idx],
                        "product": row[product_idx] if len(row) > product_idx else "",
                        "quantity": float(cleaned_qty),
                        "price": float(cleaned_price),
                        "amount": float(cleaned_amount),
                    }
                )
            except (ValueError, IndexError) as e:
                logger.warning(
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞: {row}. –û—à–∏–±–∫–∞: {e}"
                )
                continue

        if not sales_data:
            await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channel_stats = {}
        for sale in sales_data:
            channel = sale["channel"]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –µ—Å—Ç—å –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
            available_channels = get_channels_from_sheet()
            if channel not in available_channels:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –≤ –¥–∞–Ω–Ω—ã—Ö: {channel}")
                continue

            if channel not in channel_stats:
                channel_stats[channel] = {
                    "count": 0,
                    "total_amount": 0,
                    "total_quantity": 0,
                }

            channel_stats[channel]["count"] += 1
            channel_stats[channel]["total_amount"] += sale["amount"]
            channel_stats[channel]["total_quantity"] += sale["quantity"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–ù–ê–õ–ê–º –ü–†–û–î–ê–ñ\n\n"
        report_text += "```\n"
        report_text += "–ö–∞–Ω–∞–ª         | –ü—Ä–æ–¥–∞–∂–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –°—É–º–º–∞       \n"
        report_text += "--------------+---------+------------+-------------\n"

        total_amount = 0
        total_quantity = 0
        total_sales = len(sales_data)

        for channel, stats in sorted(channel_stats.items()):
            report_text += f"{channel:<13} | {stats['count']:>7} | {stats['total_quantity']:>10.2f} | {stats['total_amount']:>11.2f}\n"
            total_amount += stats["total_amount"]
            total_quantity += stats["total_quantity"]

        report_text += "--------------+---------+------------+-------------\n"
        report_text += f"{'–ò–¢–û–ì–û':<13} | {total_sales:>7} | {total_quantity:>10.2f} | {total_amount:>11.2f}\n"
        report_text += "```"

        await query.edit_message_text(report_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")


async def generate_products_report(query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    try:
        sheet = get_google_sheet_cached()
        all_data = sheet.get_all_values()

        logger.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(all_data)}")
        if len(all_data) > 1:
            logger.info(f"–ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {all_data[1:4]}")

        if len(all_data) <= 1:
            await query.edit_message_text("üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        headers = all_data[0]
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü–∞: {headers}")
        try:
            product_idx = headers.index("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            qty_idx = headers.index("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            amount_idx = headers.index("–°—É–º–º–∞")
        except ValueError as e:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –∫–æ–ª–æ–Ω–∫–∞: {e}. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
            )
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        product_stats = {}
        for row in all_data[1:]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not any(row) or len(row) < 6:
                continue

            try:
                # –û—á–∏—â–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                cleaned_qty = clean_numeric_value(row[qty_idx])
                cleaned_amount = clean_numeric_value(row[amount_idx])

                product = row[product_idx]
                quantity = float(cleaned_qty)
                amount = float(cleaned_amount)

                if product not in product_stats:
                    product_stats[product] = {
                        "count": 0,
                        "total_amount": 0,
                        "total_quantity": 0,
                    }

                product_stats[product]["count"] += 1
                product_stats[product]["total_amount"] += amount
                product_stats[product]["total_quantity"] += quantity

            except (ValueError, IndexError) as e:
                logger.warning(
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞: {row}. –û—à–∏–±–∫–∞: {e}"
                )
                continue

        if not product_stats:
            await query.edit_message_text("üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üì¶ –û–¢–ß–ï–¢ –ü–û –¢–û–í–ê–†–ê–ú\n\n"
        report_text += "```\n"
        report_text += "–¢–æ–≤–∞—Ä               | –ü—Ä–æ–¥–∞–∂–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –°—É–º–º–∞       \n"
        report_text += "--------------------+---------+------------+-------------\n"

        for product, stats in sorted(product_stats.items()):
            report_text += f"{product:<19} | {stats['count']:>7} | {stats['total_quantity']:>10.2f} | {stats['total_amount']:>11.2f}\n"

        report_text += "```"

        await query.edit_message_text(report_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")


# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    init_db()

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_entry))
    application.add_handler(CommandHandler("report", generate_report))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity_input)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º...")
    application.run_polling()
