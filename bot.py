import time
import logging
import os
from contextlib import contextmanager
from functools import lru_cache
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
import gspread
from google.oauth2.service_account import Credentials
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = os.environ["BOT_TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
DATABASE_URL = os.environ["DATABASE_URL"]
CREDENTIALS_JSON = os.environ["CREDENTIALS"]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_TTL_SECONDS = 300  # 5 –º–∏–Ω—É—Ç

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Google Sheets
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
SHEET_NAME = '–¢–µ—Å—Ç'
PRODUCT_SHEET_NAME = '–ü—Ä–æ–¥—É–∫—Ü–∏—è'

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂
SALES_CHANNELS = ["–°–∞–π—Ç", "–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", "–¢–µ–ª–µ–≥—Ä–∞–º", "–û–∑–æ–Ω", "–ú–∞—Ä–∫–µ—Ç—ã"]

# –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–¥–∞–∂
EXPECTED_HEADERS = ["–ö–∞–Ω–∞–ª", "–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞", "–î–∞—Ç–∞"]

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log"),
    ],
)
logger = logging.getLogger(__name__)

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode="require")
        logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        yield conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

@contextmanager
def get_db_cursor():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –∫—É—Ä—Å–æ—Ä, –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    with get_db_connection() as conn:
        cur = conn.cursor(cursor_factory=RealDictCursor)
        try:
            yield cur
            conn.commit()
        except Exception as e:
            conn.rollback()
            raise e
        finally:
            cur.close()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    try:
        with get_db_cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS user_states (
                    user_id BIGINT PRIMARY KEY,
                    channel VARCHAR(50),
                    product_id VARCHAR(20),
                    product_name VARCHAR(100),
                    product_price VARCHAR(20),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# ==================== GOOGLE SHEETS ====================
# –ü–∞—Ä—Å–∏–º JSON credentials
credentials_info = json.loads(CREDENTIALS_JSON)

@lru_cache(maxsize=1)
def get_google_sheet_cached():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏—Å—Ç Google Sheets —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        creds = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)
        
        logger.info("‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return worksheet
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        raise

@lru_cache(maxsize=1)
def get_products_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        sheet = get_google_sheet_cached()

        try:
            product_sheet = sheet.spreadsheet.worksheet(PRODUCT_SHEET_NAME)
            logger.info("‚úÖ –õ–∏—Å—Ç '–ü—Ä–æ–¥—É–∫—Ü–∏—è' –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '–ü—Ä–æ–¥—É–∫—Ü–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return []

        all_data = product_sheet.get_all_values()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –ª–∏—Å—Ç–∞ '–ü—Ä–æ–¥—É–∫—Ü–∏—è': {len(all_data)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        products_data = all_data[1:] if len(all_data) > 1 else []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        product_list = []
        for row in products_data:
            if len(row) >= 3 and row[0] and row[1]:
                product_list.append({
                    'id': row[0].strip(),
                    'name': row[1].strip(),
                    'price': row[2].strip() if len(row) >= 3 and row[2] else '0'
                })
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(product_list)} —Ç–æ–≤–∞—Ä–æ–≤")
        return product_list
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def get_product_price(product_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ ID"""
    try:
        products = get_products_from_sheet()
        product = next((p for p in products if p['id'] == str(product_id)), None)
        
        if product and 'price' in product:
            return float(product['price'])
        else:
            logger.error(f"‚ùå –¶–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None

def products_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
    try:
        products = get_products_from_sheet()
        keyboard = []
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(products), 2):
            row = []
            row.append(InlineKeyboardButton(products[i]['name'], callback_data=f"product_{products[i]['id']}"))
            
            if i + 1 < len(products):
                row.append(InlineKeyboardButton(products[i+1]['name'], callback_data=f"product_{products[i+1]['id']}"))
            
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        return InlineKeyboardMarkup(keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]])

def sales_channels_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø—Ä–æ–¥–∞–∂"""
    keyboard = []
    for i in range(0, len(SALES_CHANNELS), 2):
        row = [
            InlineKeyboardButton(SALES_CHANNELS[i], callback_data=SALES_CHANNELS[i]),
            InlineKeyboardButton(SALES_CHANNELS[i + 1], callback_data=SALES_CHANNELS[i + 1])
            if i + 1 < len(SALES_CHANNELS)
            else None,
        ]
        row = [btn for btn in row if btn is not None]
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.message.from_user.first_name
    help_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂.

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report
"""
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    user_id = update.message.from_user.id

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        with get_db_cursor() as cur:
            cur.execute(
                "INSERT INTO user_states (user_id) VALUES (%s) ON CONFLICT (user_id) DO UPDATE SET channel = NULL, product_id = NULL, product_name = NULL, product_price = NULL",
                (user_id,),
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –≤ add_entry: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂:", reply_markup=sales_channels_keyboard()
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    await query.answer()
    
    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –¢–û–í–ê–†–ê
    if data.startswith("product_"):
        try:
            product_id = data.split("_")[1]
            products = get_products_from_sheet()
            selected_product = next((p for p in products if p['id'] == product_id), None)
            
            if selected_product:
                with get_db_cursor() as cur:
                    cur.execute(
                        "UPDATE user_states SET product_id = %s, product_name = %s, product_price = %s WHERE user_id = %s",
                        (selected_product['id'], selected_product['name'], selected_product['price'], user_id)
                    )
                
                await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: {selected_product['name']}")
                await query.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n–ü—Ä–∏–º–µ—Ä: `2`", parse_mode='Markdown')
            else:
                await query.edit_message_text(text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await query.message.reply_text("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –µ—â–µ —Ä–∞–∑:", reply_markup=products_keyboard())
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –û–¢–ú–ï–ù–´
    elif data == "cancel":
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    "UPDATE user_states SET channel = NULL, product_id = NULL, product_name = NULL, product_price = NULL WHERE user_id = %s",
                    (user_id,)
                )
            await query.edit_message_text(text="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
            await query.edit_message_text(text="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –ö–ê–ù–ê–õ–ê –ü–†–û–î–ê–ñ
    elif data in SALES_CHANNELS:
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    "UPDATE user_states SET channel = %s, product_id = NULL, product_name = NULL, product_price = NULL WHERE user_id = %s",
                    (data, user_id)
                )
            
            await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {data}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                products = get_products_from_sheet()
                if products:
                    await query.message.reply_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                        reply_markup=products_keyboard()
                    )
                else:
                    await query.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã: {e}")
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –û–¢–ß–ï–¢–û–í
    elif data.startswith("report_"):
        await handle_report_buttons(update, context)
    
    # 5. –ï—Å–ª–∏ callback_data –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
        await query.edit_message_text(text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================
async def handle_product_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    # –î–æ—Å—Ç–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    try:
        with get_db_cursor() as cur:
            cur.execute("SELECT channel, product_id, product_name, product_price FROM user_states WHERE user_id = %s", (user_id,))
            user_state = cur.fetchone()

        if not user_state or not user_state["channel"]:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add")
            return
            
        if not user_state["product_name"]:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add")
            return

        channel = user_state["channel"]
        product_name = user_state["product_name"]
        product_price = float(user_state["product_price"]) if user_state["product_price"] else 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î –≤ handle_product_data: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¢–û–õ–¨–ö–û –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    try:
        quantity_input = user_message.strip()
        quantity = float(quantity_input.replace(",", "."))

        if quantity <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        sheet = get_google_sheet_cached()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        all_data = sheet.get_all_values()
        next_row = len(all_data) + 1  # –°–ª–µ–¥—É—é—â–∞—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        row_data = [channel, product_name, quantity, product_price, quantity * product_price, datetime.now().strftime("%d.%m.%Y %H:%M")]
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        sheet.append_row(row_data)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É {next_row}: {row_data}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"""‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!

*–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂:* {channel}
*–¢–æ–≤–∞—Ä:* {product_name}
*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity}
*–¶–µ–Ω–∞:* {product_price:.2f} —Ä—É–±.
*–°—É–º–º–∞:* {quantity * product_price:.2f} —Ä—É–±.
"""
        await update.message.reply_text(success_text, parse_mode="Markdown")
        logger.info(f"üë§ User {user_id} added record: {row_data}")

    except ValueError:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: `2` –∏–ª–∏ `1.5`",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}", exc_info=True)
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await update.message.reply_text(error_msg)

# ==================== –û–¢–ß–ï–¢–´ ====================
async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    try:
        keyboard = [
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂", callback_data="report_channels")],
            [InlineKeyboardButton("üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="report_products")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_report: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

async def handle_report_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –æ—Ç—á–µ—Ç–æ–≤"""
    query = update.callback_query
    data = query.data
    
    await query.answer()
    
    if data == "report_channels":
        await generate_channels_report(query)
    elif data == "report_products":
        await generate_products_report(query)
    elif data == "report_cancel":
        await query.edit_message_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

async def generate_channels_report(query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂"""
    try:
        sheet = get_google_sheet_cached()
        all_data = sheet.get_all_values()
        
        if len(all_data) <= 1:
            await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        headers = all_data[0]
        try:
            channel_idx = headers.index("–ö–∞–Ω–∞–ª")
            product_idx = headers.index("–¢–æ–≤–∞—Ä")
            qty_idx = headers.index("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            price_idx = headers.index("–¶–µ–Ω–∞")
            amount_idx = headers.index("–°—É–º–º–∞")
        except ValueError as e:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –∫–æ–ª–æ–Ω–∫–∞: {e}. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
            return
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        sales_data = []
        for row in all_data[1:]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not any(row):
                continue
                
            if len(row) > max(channel_idx, product_idx, qty_idx, amount_idx) and row[channel_idx] and row[qty_idx] and row[amount_idx]:
                try:
                    sales_data.append({
                        'channel': row[channel_idx],
                        'product': row[product_idx] if len(row) > product_idx else '',
                        'quantity': float(row[qty_idx].replace(',', '.')),
                        'price': float(row[price_idx].replace(',', '.')) if len(row) > price_idx and row[price_idx] else 0,
                        'amount': float(row[amount_idx].replace(',', '.'))
                    })
                except ValueError:
                    continue
        
        if not sales_data:
            await query.edit_message_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channel_stats = {}
        for sale in sales_data:
            channel = sale['channel']
            if channel not in channel_stats:
                channel_stats[channel] = {
                    'count': 0,
                    'total_amount': 0,
                    'total_quantity': 0
                }
            
            channel_stats[channel]['count'] += 1
            channel_stats[channel]['total_amount'] += sale['amount']
            channel_stats[channel]['total_quantity'] += sale['quantity']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–ù–ê–õ–ê–ú –ü–†–û–î–ê–ñ\n\n"
        report_text += "```\n"
        report_text += "–ö–∞–Ω–∞–ª         | –ü—Ä–æ–¥–∞–∂–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –°—É–º–º–∞       \n"
        report_text += "--------------+---------+------------+-------------\n"
        
        total_amount = 0
        total_quantity = 0
        total_sales = len(sales_data)
        
        for channel, stats in sorted(channel_stats.items()):
            report_text += f"{channel:<13} | {stats['count']:>7} | {stats['total_quantity']:>10.2f} | {stats['total_amount']:>11.2f}\n"
            total_amount += stats['total_amount']
            total_quantity += stats['total_quantity']
        
        report_text += "--------------+---------+------------+-------------\n"
        report_text += f"{'–ò–¢–û–ì–û':<13} | {total_sales:>7} | {total_quantity:>10.2f} | {total_amount:>11.2f}\n"
        report_text += "```"
        
        await query.edit_message_text(report_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

async def generate_products_report(query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    try:
        sheet = get_google_sheet_cached()
        all_data = sheet.get_all_values()
        
        if len(all_data) <= 1:
            await query.edit_message_text("üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        headers = all_data[0]
        try:
            product_idx = headers.index("–¢–æ–≤–∞—Ä")
            qty_idx = headers.index("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            amount_idx = headers.index("–°—É–º–º–∞")
        except ValueError as e:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –∫–æ–ª–æ–Ω–∫–∞: {e}. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        product_stats = {}
        for row in all_data[1:]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not any(row):
                continue
                
            if len(row) > max(product_idx, qty_idx, amount_idx) and row[product_idx] and row[qty_idx] and row[amount_idx]:
                try:
                    product = row[product_idx]
                    quantity = float(row[qty_idx].replace(',', '.'))
                    amount = float(row[amount_idx].replace(',', '.'))
                    
                    if product not in product_stats:
                        product_stats[product] = {
                            'count': 0,
                            'total_amount': 0,
                            'total_quantity': 0
                        }
                    
                    product_stats[product]['count'] += 1
                    product_stats[product]['total_amount'] += amount
                    product_stats[product]['total_quantity'] += quantity
                    
                except ValueError:
                    continue
        
        if not product_stats:
            await query.edit_message_text("üì¶ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üì¶ –û–¢–ß–ï–¢ –ü–û –¢–û–í–ê–†–ê–ú\n\n"
        report_text += "```\n"
        report_text += "–¢–æ–≤–∞—Ä               | –ü—Ä–æ–¥–∞–∂–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –°—É–º–º–∞       \n"
        report_text += "--------------------+---------+------------+-------------\n"
        
        for product, stats in sorted(product_stats.items()):
            report_text += f"{product:<19} | {stats['count']:>7} | {stats['total_quantity']:>10.2f} | {stats['total_amount']:>11.2f}\n"
        
        report_text += "```"
        
        await query.edit_message_text(report_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    init_db()

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_entry))
    application.add_handler(CommandHandler("report", generate_report))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_data)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()