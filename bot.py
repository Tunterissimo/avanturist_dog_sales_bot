import time
import logging
import os
from contextlib import contextmanager
from functools import lru_cache
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
import gspread
from google.oauth2.service_account import Credentials
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime, timedelta

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = os.environ["BOT_TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
DATABASE_URL = os.environ["DATABASE_URL"]
CREDENTIALS_JSON = os.environ["CREDENTIALS"]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_TTL_SECONDS = 300  # 5 –º–∏–Ω—É—Ç

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Google Sheets
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
SHEET_NAME = "–ü—Ä–æ–¥–∞–∂–∏"
CATALOG_SHEET_NAME = "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"
CHANNELS_SHEET_NAME = "–ö–∞–Ω–∞–ª—ã"
REFERENCE_SHEET_NAME = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"
PAYMENT_METHODS_SHEET_NAME = "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
PRODUCT_TYPES_HEADER = "–¢–ò–ü–´ –¢–û–í–ê–†–û–í"
WIDTHS_HEADER = "–®–ò–†–ò–ù–´ –°–¢–†–û–ü"
COLOR_TYPES_HEADER = "–¢–ò–ü–´ –†–ê–°–¶–í–ï–¢–û–ö"
COLORS_HEADER = "–†–ê–°–¶–í–ï–¢–ö–ò"


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def clean_numeric_value(value):
    """–û—á–∏—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not value:
        return "0"

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if isinstance(value, (int, float)):
        return str(value)

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    cleaned = (
        value.replace("—Ä.", "").replace(" ", "").replace("\xa0", "").replace(",", ".")
    )
    return cleaned.strip()


def debug_catalog():
    """–í—ã–≤–æ–¥–∏—Ç –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()

        logger.info("üìã –í–°–ï –ó–ê–ü–ò–°–ò –í –ö–ê–¢–ê–õ–û–ì–ï –¢–û–í–ê–†–û–í:")
        for i, row in enumerate(all_data):
            if i == 0:  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {row}")
            else:
                if len(row) >= 8:
                    logger.info(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {row[:8]}")  # –ü–µ—Ä–≤—ã–µ 8 –∫–æ–ª–æ–Ω–æ–∫
                else:
                    logger.info(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {row} (–Ω–µ–ø–æ–ª–Ω–∞—è)")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


def check_catalog_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()

        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ö–ê–¢–ê–õ–û–ì–ê:")
        if len(all_data) > 0:
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {all_data[0]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        for i in range(min(11, len(all_data))):
            row = all_data[i]
            if i == 0:
                logger.info("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:")
            else:
                logger.info(f"üìã –°—Ç—Ä–æ–∫–∞ {i}:")

            for col_idx, value in enumerate(row[:8]):  # –ü–µ—Ä–≤—ã–µ 8 –∫–æ–ª–æ–Ω–æ–∫
                logger.info(f"   –ö–æ–ª–æ–Ω–∫–∞ {col_idx}: '{value}'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log"),
    ],
)
logger = logging.getLogger(__name__)


# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode="require")
        logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        yield conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()


@contextmanager
def get_db_cursor():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –∫—É—Ä—Å–æ—Ä, –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    with get_db_connection() as conn:
        cur = conn.cursor(cursor_factory=RealDictCursor)
        try:
            yield cur
            conn.commit()
        except Exception as e:
            conn.rollback()
            raise e
        finally:
            cur.close()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    try:
        with get_db_cursor() as cur:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute("DROP TABLE IF EXISTS user_states")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute(
                """
                CREATE TABLE user_states (
                    user_id BIGINT PRIMARY KEY,
                    channel VARCHAR(50),
                    product_type VARCHAR(50),
                    width VARCHAR(20),
                    size VARCHAR(20),
                    length VARCHAR(20),
                    color_type VARCHAR(50),
                    color VARCHAR(50),
                    payment_method VARCHAR(50),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


# ==================== GOOGLE SHEETS ====================
# –ü–∞—Ä—Å–∏–º JSON credentials
credentials_info = json.loads(CREDENTIALS_JSON)


@lru_cache(maxsize=1)
def get_google_sheet_cached():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏—Å—Ç Google Sheets —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        creds = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)

        logger.info("‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return worksheet
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        raise


@lru_cache(maxsize=1)
def get_channels_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        sheet = get_google_sheet_cached()

        try:
            channels_sheet = sheet.spreadsheet.worksheet(CHANNELS_SHEET_NAME)
            logger.info("‚úÖ –õ–∏—Å—Ç '–ö–∞–Ω–∞–ª—ã' –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '–ö–∞–Ω–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return []

        all_data = channels_sheet.get_all_values()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –ª–∏—Å—Ç–∞ '–ö–∞–Ω–∞–ª—ã': {len(all_data)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        channels_data = all_data[1:] if len(all_data) > 1 else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_list = []
        for row in channels_data:
            if len(row) >= 2 and row[0] and row[1]:
                channels_list.append(row[1].strip())

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤: {channels_list}")
        return channels_list

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []


@lru_cache(maxsize=1)
def get_payment_methods_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        sheet = get_google_sheet_cached()

        try:
            payment_sheet = sheet.spreadsheet.worksheet(PAYMENT_METHODS_SHEET_NAME)
            logger.info("‚úÖ –õ–∏—Å—Ç '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return ["–ò–ü", "–ü–µ—Ä–µ–≤–æ–¥", "–ù–∞–ª–∏—á–Ω—ã–µ"]  # Fallback –∑–Ω–∞—á–µ–Ω–∏—è

        all_data = payment_sheet.get_all_values()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –ª–∏—Å—Ç–∞ '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã': {len(all_data)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        payment_data = all_data[1:] if len(all_data) > 1 else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_list = []
        for row in payment_data:
            if len(row) >= 2 and row[1]:  # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
                payment_list.append(row[1].strip())

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(payment_list)} —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {payment_list}")
        return payment_list

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        return ["–ò–ü", "–ü–µ—Ä–µ–≤–æ–¥", "–ù–∞–ª–∏—á–Ω—ã–µ"]  # Fallback –∑–Ω–∞—á–µ–Ω–∏—è


@lru_cache(maxsize=1)
def get_reference_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        sheet = get_google_sheet_cached()

        try:
            ref_sheet = sheet.spreadsheet.worksheet(REFERENCE_SHEET_NAME)
            all_data = ref_sheet.get_all_values()
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '{REFERENCE_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return {}

        reference_data = {
            "product_types": [],
            "widths": [],
            "color_types": [],
            "colors": [],
        }

        current_section = None

        for row in all_data:
            if not any(row):
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
            if PRODUCT_TYPES_HEADER in row[0]:
                current_section = "product_types"
                continue
            elif WIDTHS_HEADER in row[0]:
                current_section = "widths"
                continue
            elif COLOR_TYPES_HEADER in row[0]:
                current_section = "color_types"
                continue
            elif COLORS_HEADER in row[0]:
                current_section = "colors"
                continue

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
            if current_section == "product_types" and len(row) >= 4:
                if row[0] and row[0] != "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    reference_data["product_types"].append(
                        {
                            "type": row[0].strip(),
                            "has_width": row[1].strip().lower() == "–¥–∞",
                            "has_size": row[2].strip().lower() == "–¥–∞",
                            "has_length": row[3].strip().lower() == "–¥–∞",
                        }
                    )

            elif current_section == "widths" and len(row) >= 3:
                if row[0] and row[0] != "–®–∏—Ä–∏–Ω–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    available_sizes = (
                        [s.strip() for s in row[1].split(",")] if row[1] else []
                    )
                    available_lengths = (
                        [l.strip() for l in row[2].split(",")] if row[2] else []
                    )
                    reference_data["widths"].append(
                        {
                            "width": row[0].strip(),
                            "available_sizes": available_sizes,
                            "available_lengths": available_lengths,
                        }
                    )

            elif current_section == "color_types" and len(row) >= 2:
                if row[0] and row[0] != "–¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    available_colors = (
                        [c.strip() for c in row[1].split(",")] if row[1] else []
                    )
                    reference_data["color_types"].append(
                        {"type": row[0].strip(), "available_colors": available_colors}
                    )

            elif current_section == "colors" and row[0]:
                if row[0] != "–†–∞—Å—Ü–≤–µ—Ç–∫–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    reference_data["colors"].append(row[0].strip())

        logger.info(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_data['product_types'])} —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤, "
            f"{len(reference_data['widths'])} —à–∏—Ä–∏–Ω, {len(reference_data['color_types'])} —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫, "
            f"{len(reference_data['colors'])} —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫"
        )

        return reference_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
        return {}


def get_product_price_from_catalog(
    product_type, width, size, length, color_type, color
):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()

        logger.info(
            f"üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –¥–ª—è: product_type='{product_type}', width='{width}', size='{size}', length='{length}', color_type='{color_type}', color='{color}'"
        )

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'None' –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if size == "None":
            size = ""
        if width == "None":
            width = ""
        if length == "None":
            length = ""

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
        def normalize(text):
            return str(text).lower().strip() if text else ""

        norm_product_type = normalize(product_type)
        norm_width = normalize(width)
        norm_size = normalize(size)
        norm_length = normalize(length)
        norm_color_type = normalize(color_type)
        norm_color = normalize(color)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 9:  # –¢–µ–ø–µ—Ä—å 9 –∫–æ–ª–æ–Ω–æ–∫ —Å —É—á–µ—Ç–æ–º –¥–ª–∏–Ω—ã
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_product_type = normalize(row[2]) if len(row) > 2 else ""
            catalog_width = normalize(row[3]) if len(row) > 3 else ""
            catalog_size = normalize(row[4]) if len(row) > 4 else ""
            catalog_length = normalize(row[5]) if len(row) > 5 else ""
            catalog_color_type = normalize(row[6]) if len(row) > 6 else ""
            catalog_color = normalize(row[7]) if len(row) > 7 else ""
            catalog_price = row[8].strip() if len(row) > 8 else ""

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(
                f"üìã –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º: '{catalog_product_type}', '{catalog_width}', '{catalog_size}', '{catalog_length}', '{catalog_color_type}', '{catalog_color}'"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            type_match = catalog_product_type == norm_product_type
            width_match = (not norm_width) or (catalog_width == norm_width)
            size_match = (not norm_size) or (catalog_size == norm_size)
            length_match = (not norm_length) or (catalog_length == norm_length)
            color_type_match = catalog_color_type == norm_color_type
            color_match = catalog_color == norm_color

            logger.info(
                f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: –¢–∏–ø={type_match}, –®–∏—Ä–∏–Ω–∞={width_match}, –†–∞–∑–º–µ—Ä={size_match}, –î–ª–∏–Ω–∞={length_match}, –¢–∏–ø–†–∞—Å—Ü–≤–µ—Ç–∫–∏={color_type_match}, –†–∞—Å—Ü–≤–µ—Ç–∫–∞={color_match}"
            )

            if (
                type_match
                and width_match
                and size_match
                and length_match
                and color_type_match
                and color_match
                and catalog_price
            ):

                try:
                    price_value = float(clean_numeric_value(catalog_price))
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {price_value} —Ä—É–±.")
                    return price_value
                except ValueError:
                    logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã: '{catalog_price}'")
                    continue

        logger.warning("üîç –ü–æ–∏—Å–∫ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...")

        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞, —Ç–∏–ø—É —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 9:
                continue

            catalog_product_type = normalize(row[2]) if len(row) > 2 else ""
            catalog_color_type = normalize(row[6]) if len(row) > 6 else ""
            catalog_color = normalize(row[7]) if len(row) > 7 else ""
            catalog_price = row[8].strip() if len(row) > 8 else ""

            if (
                catalog_product_type == norm_product_type
                and catalog_color_type == norm_color_type
                and catalog_color == norm_color
                and catalog_price
            ):

                try:
                    price_value = float(clean_numeric_value(catalog_price))
                    logger.info(
                        f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {price_value} —Ä—É–±."
                    )
                    return price_value
                except ValueError:
                    continue

        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞ –∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 9:
                continue

            catalog_product_type = normalize(row[2]) if len(row) > 2 else ""
            catalog_color = normalize(row[7]) if len(row) > 7 else ""
            catalog_price = row[8].strip() if len(row) > 8 else ""

            if (
                catalog_product_type == norm_product_type
                and catalog_color == norm_color
                and catalog_price
            ):

                try:
                    price_value = float(clean_numeric_value(catalog_price))
                    logger.info(
                        f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É –∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ: {price_value} —Ä—É–±."
                    )
                    return price_value
                except ValueError:
                    continue

        logger.error("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é")

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("üìä –í–°–ï –ó–ê–ü–ò–°–ò –ö–ê–¢–ê–õ–û–ì–ê:")
        for i, row in enumerate(all_data):
            if i == 0:
                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {row}")
            elif len(row) >= 9:
                logger.info(
                    f"–°—Ç—Ä–æ–∫–∞ {i+1}: –¢–∏–ø='{row[2]}', –®–∏—Ä–∏–Ω–∞='{row[3]}', –†–∞–∑–º–µ—Ä='{row[4]}', –î–ª–∏–Ω–∞='{row[5]}', –¢–∏–ø–†–∞—Å—Ü–≤–µ—Ç–∫–∏='{row[6]}', –†–∞—Å—Ü–≤–µ—Ç–∫–∞='{row[7]}', –¶–µ–Ω–∞='{row[8]}'"
                )

        return 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã: {e}", exc_info=True)
        return 0


def get_sales_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã"""
    try:
        sheet = get_google_sheet_cached()
        all_data = sheet.get_all_values()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        sales_data = []
        for row in all_data[1:]:
            if len(row) >= 12:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                sales_data.append(
                    {
                        "channel": row[0],
                        "product_type": row[1],
                        "width": row[2],
                        "size": row[3],
                        "length": row[4],
                        "color_type": row[5],
                        "color": row[6],
                        "quantity": int(row[7]) if row[7] and row[7].isdigit() else 0,
                        "price": float(clean_numeric_value(row[8])) if row[8] else 0,
                        "total_amount": (
                            float(clean_numeric_value(row[9])) if row[9] else 0
                        ),
                        "payment_method": row[10],
                        "date": row[11],
                    }
                )

        return sales_data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {e}")
        return []


def generate_channel_report(sales_data, period_days=30):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        cutoff_date = datetime.now() - timedelta(days=period_days)
        filtered_data = [
            sale
            for sale in sales_data
            if sale["date"]
            and datetime.strptime(sale["date"], "%d.%m.%Y") >= cutoff_date
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channel_stats = {}
        for sale in filtered_data:
            channel = sale["channel"]
            if channel not in channel_stats:
                channel_stats[channel] = {
                    "total_sales": 0,
                    "total_amount": 0,
                    "count": 0,
                }

            channel_stats[channel]["total_sales"] += sale["quantity"]
            channel_stats[channel]["total_amount"] += sale["total_amount"]
            channel_stats[channel]["count"] += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_lines = [f"üìä *–û–¢–ß–ï–¢ –ü–û –ö–ê–ù–ê–õ–ê–ú –ü–†–û–î–ê–ñ (–∑–∞ {period_days} –¥–Ω–µ–π)*\n"]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–±—â–µ–π —Å—É–º–º—ã
        sorted_channels = sorted(
            channel_stats.items(), key=lambda x: x[1]["total_amount"], reverse=True
        )

        for channel, stats in sorted_channels:
            report_lines.append(
                f"\nüìà *{channel}:*\n"
                f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {stats['count']}\n"
                f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats['total_sales']} —à—Ç.\n"
                f"   ‚Ä¢ –°—É–º–º–∞: {stats['total_amount']:,.2f} —Ä—É–±.\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['total_amount']/stats['count']:,.2f} —Ä—É–±."
            )

        # –ò—Ç–æ–≥–∏
        total_sales = sum(stats["total_sales"] for stats in channel_stats.values())
        total_amount = sum(stats["total_amount"] for stats in channel_stats.values())
        total_count = sum(stats["count"] for stats in channel_stats.values())

        report_lines.append(
            f"\nüí∞ *–ò–¢–û–ì–û:*\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_count}\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_sales} —à—Ç.\n"
            f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.\n"
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_amount/total_count:,.2f} —Ä—É–±."
            if total_count > 0
            else "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 0 —Ä—É–±."
        )

        return "\n".join(report_lines)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"


def generate_product_report(sales_data, period_days=30):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        cutoff_date = datetime.now() - timedelta(days=period_days)
        filtered_data = [
            sale
            for sale in sales_data
            if sale["date"]
            and datetime.strptime(sale["date"], "%d.%m.%Y") >= cutoff_date
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        product_stats = {}
        for sale in filtered_data:
            product_type = sale["product_type"]
            if product_type not in product_stats:
                product_stats[product_type] = {
                    "total_sales": 0,
                    "total_amount": 0,
                    "count": 0,
                }

            product_stats[product_type]["total_sales"] += sale["quantity"]
            product_stats[product_type]["total_amount"] += sale["total_amount"]
            product_stats[product_type]["count"] += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_lines = [f"üì¶ *–û–¢–ß–ï–¢ –ü–û –¢–ò–ü–ê–ú –¢–û–í–ê–†–û–í (–∑–∞ {period_days} –¥–Ω–µ–π)*\n"]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–±—â–µ–π —Å—É–º–º—ã
        sorted_products = sorted(
            product_stats.items(), key=lambda x: x[1]["total_amount"], reverse=True
        )

        for product_type, stats in sorted_products:
            report_lines.append(
                f"\nüè∑Ô∏è *{product_type}:*\n"
                f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {stats['count']}\n"
                f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats['total_sales']} —à—Ç.\n"
                f"   ‚Ä¢ –°—É–º–º–∞: {stats['total_amount']:,.2f} —Ä—É–±.\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['total_amount']/stats['total_sales']:,.2f} —Ä—É–±."
                if stats["total_sales"] > 0
                else "   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: 0 —Ä—É–±."
            )

        # –ò—Ç–æ–≥–∏
        total_sales = sum(stats["total_sales"] for stats in product_stats.values())
        total_amount = sum(stats["total_amount"] for stats in product_stats.values())
        total_count = sum(stats["count"] for stats in product_stats.values())

        report_lines.append(
            f"\nüí∞ *–ò–¢–û–ì–û:*\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_count}\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_sales} —à—Ç.\n"
            f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.\n"
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_amount/total_count:,.2f} —Ä—É–±."
            if total_count > 0
            else "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 0 —Ä—É–±."
        )

        return "\n".join(report_lines)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def sales_channels_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø—Ä–æ–¥–∞–∂ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã"""
    try:
        channels = get_channels_from_sheet()
        keyboard = []

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(channels), 2):
            row = []
            row.append(InlineKeyboardButton(channels[i], callback_data=channels[i]))

            if i + 1 < len(channels):
                row.append(
                    InlineKeyboardButton(channels[i + 1], callback_data=channels[i + 1])
                )

            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        return InlineKeyboardMarkup(keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def product_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for product_type in ref_data["product_types"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        product_type["type"],
                        callback_data=f"type_{product_type['type']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def widths_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —à–∏—Ä–∏–Ω–∞–º–∏ —Å—Ç—Ä–æ–ø"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for width_data in ref_data["widths"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        width_data["width"],
                        callback_data=f"width_{width_data['width']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —à–∏—Ä–∏–Ω: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def sizes_keyboard(selected_width):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        width_data = next(
            (w for w in ref_data["widths"] if w["width"] == selected_width), None
        )

        if width_data:
            for size in width_data["available_sizes"]:
                keyboard.append(
                    [InlineKeyboardButton(size, callback_data=f"size_{size}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def lengths_keyboard(selected_width):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–ª–∏–Ω–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª–∏–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        width_data = next(
            (w for w in ref_data["widths"] if w["width"] == selected_width), None
        )

        if width_data:
            for length in width_data["available_lengths"]:
                keyboard.append(
                    [InlineKeyboardButton(length, callback_data=f"length_{length}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª–∏–Ω: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def color_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for color_type in ref_data["color_types"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        color_type["type"],
                        callback_data=f"colortype_{color_type['type']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def colors_keyboard(selected_color_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        color_type_data = next(
            (ct for ct in ref_data["color_types"] if ct["type"] == selected_color_type),
            None,
        )

        if color_type_data:
            for color in color_type_data["available_colors"]:
                keyboard.append(
                    [InlineKeyboardButton(color, callback_data=f"color_{color}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def all_colors_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞–º–∏ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –õ–µ–∂–∞–Ω–∫–∞ –∏ –ë—É—Å—ã)"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for color in ref_data["colors"]:
            keyboard.append(
                [InlineKeyboardButton(color, callback_data=f"color_{color}")]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Å–µ—Ö —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def payment_methods_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
    try:
        payment_methods = get_payment_methods_from_sheet()
        keyboard = []

        for method in payment_methods:
            keyboard.append(
                [InlineKeyboardButton(method, callback_data=f"payment_{method}")]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–ò–ü", callback_data="payment_–ò–ü")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥", callback_data="payment_–ü–µ—Ä–µ–≤–æ–¥")],
            [InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_–ù–∞–ª–∏—á–Ω—ã–µ")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
        return InlineKeyboardMarkup(keyboard)


def confirm_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É* - –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏\n"
        "üìä *–û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂\n"
        "üì¶ *–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üîÑ *–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* - –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü\n"
        "‚ùì *–ü–æ–º–æ—â—å* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data="add_sale"),
            InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º", callback_data="channel_report"),
        ],
        [
            InlineKeyboardButton("üì¶ –û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º", callback_data="product_report"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_data"),
        ],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        welcome_text, reply_markup=reply_markup, parse_mode="Markdown"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    logger.info(f"üñ±Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if data == "add_sale":
        await start_sale_process(update, context)
    elif data == "channel_report":
        await show_channel_report(update, context)
    elif data == "product_report":
        await show_product_report(update, context)
    elif data == "refresh_data":
        await refresh_data(update, context)
    elif data == "help":
        await show_help(update, context)
    elif data == "cancel":
        await cancel_operation(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
    elif data.startswith("channel_"):
        await handle_channel_selection(update, context, data)
    elif data.startswith("type_"):
        await handle_product_type_selection(update, context, data)
    elif data.startswith("width_"):
        await handle_width_selection(update, context, data)
    elif data.startswith("size_"):
        await handle_size_selection(update, context, data)
    elif data.startswith("length_"):
        await handle_length_selection(update, context, data)
    elif data.startswith("colortype_"):
        await handle_color_type_selection(update, context, data)
    elif data.startswith("color_"):
        await handle_color_selection(update, context, data)
    elif data.startswith("payment_"):
        await handle_payment_selection(update, context, data)
    elif data.startswith("confirm_"):
        await handle_confirmation(update, context, data)


async def start_sale_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        query = update.callback_query
        user_id = query.from_user.id

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_db_cursor() as cur:
            cur.execute(
                "DELETE FROM user_states WHERE user_id = %s",
                (user_id,),
            )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂
        keyboard = sales_channels_keyboard()
        await query.edit_message_text(
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂:*",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
        await handle_error(update, context, e)


async def handle_channel_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        channel = data.replace("channel_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                INSERT INTO user_states (user_id, channel)
                VALUES (%s, %s)
                ON CONFLICT (user_id) DO UPDATE SET channel = EXCLUDED.channel
                """,
                (user_id, channel),
            )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        keyboard = product_types_keyboard()
        await query.edit_message_text(
            "üè∑Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:*",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {e}")
        await handle_error(update, context, e)


async def handle_product_type_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        product_type = data.replace("type_", "")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ç–æ–≤–∞—Ä–∞
        ref_data = get_reference_data()
        product_info = next(
            (p for p in ref_data["product_types"] if p["type"] == product_type), None
        )

        if not product_info:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET product_type = %s
                WHERE user_id = %s
                """,
                (product_type, user_id),
            )

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        if product_info["has_width"]:
            keyboard = widths_keyboard()
            await query.edit_message_text(
                "üìè *–í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–ø—ã:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )
        else:
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —à–∏—Ä–∏–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
            keyboard = color_types_keyboard()
            await query.edit_message_text(
                "üé® *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await handle_error(update, context, e)


async def handle_width_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç—Ä–æ–ø—ã"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        width = data.replace("width_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET width = %s
                WHERE user_id = %s
                """,
                (width, user_id),
            )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ç–æ–≤–∞—Ä–∞
        with get_db_cursor() as cur:
            cur.execute(
                "SELECT product_type FROM user_states WHERE user_id = %s", (user_id,)
            )
            result = cur.fetchone()
            product_type = result["product_type"] if result else None

        ref_data = get_reference_data()
        product_info = next(
            (p for p in ref_data["product_types"] if p["type"] == product_type), None
        )

        if not product_info:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        if product_info["has_size"]:
            keyboard = sizes_keyboard(width)
            await query.edit_message_text(
                "üìê *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )
        elif product_info["has_length"]:
            keyboard = lengths_keyboard(width)
            await query.edit_message_text(
                "üìè *–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
            keyboard = color_types_keyboard()
            await query.edit_message_text(
                "üé® *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã: {e}")
        await handle_error(update, context, e)


async def handle_size_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        size = data.replace("size_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET size = %s
                WHERE user_id = %s
                """,
                (size, user_id),
            )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
        keyboard = color_types_keyboard()
        await query.edit_message_text(
            "üé® *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:*",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await handle_error(update, context, e)


async def handle_length_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–ª–∏–Ω—ã"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        length = data.replace("length_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET length = %s
                WHERE user_id = %s
                """,
                (length, user_id),
            )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
        keyboard = color_types_keyboard()
        await query.edit_message_text(
            "üé® *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:*",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã: {e}")
        await handle_error(update, context, e)


async def handle_color_type_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        color_type = data.replace("colortype_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET color_type = %s
                WHERE user_id = %s
                """,
                (color_type, user_id),
            )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ç–æ–≤–∞—Ä–∞
        with get_db_cursor() as cur:
            cur.execute(
                "SELECT product_type FROM user_states WHERE user_id = %s", (user_id,)
            )
            result = cur.fetchone()
            product_type = result["product_type"] if result else None

        # –î–ª—è –õ–µ–∂–∞–Ω–∫–∏ –∏ –ë—É—Å—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
        if product_type in ["–õ–µ–∂–∞–Ω–∫–∞", "–ë—É—Å—ã"]:
            keyboard = all_colors_keyboard()
            await query.edit_message_text(
                "üåà *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )
        else:
            keyboard = colors_keyboard(color_type)
            await query.edit_message_text(
                "üåà *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É:*",
                reply_markup=keyboard,
                parse_mode="Markdown",
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏: {e}")
        await handle_error(update, context, e)


async def handle_color_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        color = data.replace("color_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET color = %s
                WHERE user_id = %s
                """,
                (color, user_id),
            )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        keyboard = payment_methods_keyboard()
        await query.edit_message_text(
            "üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*",
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏: {e}")
        await handle_error(update, context, e)


async def handle_payment_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        payment_method = data.replace("payment_", "")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        with get_db_cursor() as cur:
            cur.execute(
                """
                UPDATE user_states 
                SET payment_method = %s
                WHERE user_id = %s
                """,
                (payment_method, user_id),
            )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–µ
        with get_db_cursor() as cur:
            cur.execute("SELECT * FROM user_states WHERE user_id = %s", (user_id,))
            sale_data = cur.fetchone()

        if not sale_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        price = get_product_price_from_catalog(
            sale_data["product_type"],
            sale_data["width"],
            sale_data["size"],
            sale_data["length"],
            sale_data["color_type"],
            sale_data["color"],
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = (
            f"üìã *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–î–ê–ñ–ò*\n\n"
            f"üìä *–ö–∞–Ω–∞–ª:* {sale_data['channel']}\n"
            f"üè∑Ô∏è *–¢–æ–≤–∞—Ä:* {sale_data['product_type']}\n"
        )

        if sale_data["width"]:
            confirmation_text += f"üìè *–®–∏—Ä–∏–Ω–∞:* {sale_data['width']}\n"
        if sale_data["size"]:
            confirmation_text += f"üìê *–†–∞–∑–º–µ—Ä:* {sale_data['size']}\n"
        if sale_data["length"]:
            confirmation_text += f"üìè *–î–ª–∏–Ω–∞:* {sale_data['length']}\n"

        confirmation_text += (
            f"üé® *–¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:* {sale_data['color_type']}\n"
            f"üåà *–†–∞—Å—Ü–≤–µ—Ç–∫–∞:* {sale_data['color']}\n"
            f"üí≥ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {sale_data['payment_method']}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {price:,.2f} —Ä—É–±.\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["current_price"] = price

        await query.edit_message_text(confirmation_text, parse_mode="Markdown")

        # –ñ–¥–µ–º –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        context.user_data["awaiting_quantity"] = True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await handle_error(update, context, e)


async def handle_quantity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        user_id = update.message.from_user.id
        quantity_text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            quantity = int(quantity_text)
            if quantity <= 0:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–µ
        with get_db_cursor() as cur:
            cur.execute("SELECT * FROM user_states WHERE user_id = %s", (user_id,))
            sale_data = cur.fetchone()

        if not sale_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        price = context.user_data.get("current_price", 0)
        total_amount = price * quantity

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            f"‚úÖ *–§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï*\n\n"
            f"‚Ä¢ *–ö–∞–Ω–∞–ª:* {sale_data['channel']}\n"
            f"‚Ä¢ *–¢–æ–≤–∞—Ä:* {sale_data['product_type']}\n"
        )

        if sale_data["width"]:
            confirmation_text += f"üìè *–®–∏—Ä–∏–Ω–∞:* {sale_data['width']}\n"
        if sale_data["size"]:
            confirmation_text += f"üìê *–†–∞–∑–º–µ—Ä:* {sale_data['size']}\n"
        if sale_data["length"]:
            confirmation_text += f"üìè *–î–ª–∏–Ω–∞:* {sale_data['length']}\n"

        confirmation_text += (
            f"‚Ä¢ *–¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:* {sale_data['color_type']}\n"
            f"‚Ä¢ *–†–∞—Å—Ü–≤–µ—Ç–∫–∞:* {sale_data['color']}\n"
            f"‚Ä¢ *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {sale_data['payment_method']}\n"
            f"‚Ä¢ *–¶–µ–Ω–∞ –∑–∞ —à—Ç.:* {price:,.2f} —Ä—É–±.\n"
            f"‚Ä¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity} —à—Ç.\n"
            f"‚Ä¢ *–û–±—â–∞—è —Å—É–º–º–∞:* {total_amount:,.2f} —Ä—É–±.\n\n"
            f"‚Ä¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø—Ä–æ–¥–∞–∂—É?*"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–±—â—É—é —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data["quantity"] = quantity
        context.user_data["total_amount"] = total_amount

        keyboard = confirm_keyboard()
        await update.message.reply_text(
            confirmation_text, reply_markup=keyboard, parse_mode="Markdown"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        context.user_data["awaiting_quantity"] = False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await handle_error(update, context, e)


async def handle_confirmation(
    update: Update, context: ContextTypes.DEFAULT_TYPE, data: str
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        query = update.callback_query
        user_id = query.from_user.id

        if data == "confirm_yes":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–µ
            with get_db_cursor() as cur:
                cur.execute("SELECT * FROM user_states WHERE user_id = %s", (user_id,))
                sale_data = cur.fetchone()

            if not sale_data:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            quantity = context.user_data.get("quantity", 1)
            total_amount = context.user_data.get("total_amount", 0)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É –≤ Google –¢–∞–±–ª–∏—Ü—É
            try:
                sheet = get_google_sheet_cached()

                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                current_date = datetime.now().strftime("%d.%m.%Y")
                row_data = [
                    sale_data["channel"],
                    sale_data["product_type"],
                    sale_data["width"] or "",
                    sale_data["size"] or "",
                    sale_data["length"] or "",
                    sale_data["color_type"] or "",
                    sale_data["color"] or "",
                    quantity,
                    context.user_data.get("current_price", 0),
                    total_amount,
                    sale_data["payment_method"],
                    current_date,
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                sheet.append_row(row_data)

                logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É: {row_data}")

                await query.edit_message_text(
                    f"‚úÖ *–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!*\n\n"
                    f"‚Ä¢ –°—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.\n"
                    f"‚Ä¢ –î–∞—Ç–∞: {current_date}\n\n"
                    f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton(
                                    "üìù –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data="add_sale"
                                )
                            ],
                            [
                                InlineKeyboardButton(
                                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                                )
                            ],
                        ]
                    ),
                )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with get_db_cursor() as cur:
                    cur.execute(
                        "DELETE FROM user_states WHERE user_id = %s", (user_id,)
                    )

                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.clear()

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

        else:  # confirm_no
            await query.edit_message_text(
                "‚ùå *–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "üìù –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data="add_sale"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                            )
                        ],
                    ]
                ),
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await handle_error(update, context, e)


async def show_channel_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂"""
    try:
        query = update.callback_query
        sales_data = get_sales_data()
        report = generate_channel_report(sales_data)

        await query.edit_message_text(
            report,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º: {e}")
        await handle_error(update, context, e)


async def show_product_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        query = update.callback_query
        sales_data = get_sales_data()
        report = generate_product_report(sales_data)

        await query.edit_message_text(
            report,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {e}")
        await handle_error(update, context, e)


async def refresh_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        query = update.callback_query

        # –û—á–∏—â–∞–µ–º –∫–µ—à
        get_google_sheet_cached.cache_clear()
        get_channels_from_sheet.cache_clear()
        get_payment_methods_from_sheet.cache_clear()
        get_reference_data.cache_clear()

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        get_google_sheet_cached()
        get_channels_from_sheet()
        get_payment_methods_from_sheet()
        get_reference_data()

        await query.edit_message_text(
            "üîÑ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n–ö–µ—à –æ—á–∏—â–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        await handle_error(update, context, e)


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    try:
        query = update.callback_query

        help_text = (
            "ü§ñ *–ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£*\n\n"
            "–Ø –ø–æ–º–æ–≥–∞—é –≤–µ—Å—Ç–∏ —É—á–µ—Ç –ø—Ä–æ–¥–∞–∂. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "üìù *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É* - –ø–æ—à–∞–≥–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏\n"
            "üìä *–û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º* - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –∫–∞–Ω–∞–ª–∞–º\n"
            "üì¶ *–û—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º* - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤\n"
            "üîÑ *–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü\n\n"
            "*–ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞ (—à–∏—Ä–∏–Ω–∞, —Ä–∞–∑–º–µ—Ä, –¥–ª–∏–Ω–∞)\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É\n"
            "5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
            "6. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "7. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ Google –¢–∞–±–ª–∏—Ü—É."
        )

        await query.edit_message_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            ),
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        await handle_error(update, context, e)


async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    try:
        query = update.callback_query
        user_id = query.from_user.id

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_db_cursor() as cur:
            cur.execute("DELETE FROM user_states WHERE user_id = %s", (user_id,))

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()

        await query.edit_message_text(
            "‚ùå *–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üìù –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞", callback_data="add_sale"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                        )
                    ],
                ]
            ),
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        await handle_error(update, context, e)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user_id = update.message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if context.user_data.get("awaiting_quantity", False):
            await handle_quantity_input(update, context)
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        )

        await update.message.reply_text(
            "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboard,
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await handle_error(update, context, e)


async def handle_error(
    update: Update, context: ContextTypes.DEFAULT_TYPE, error: Exception
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {error}", exc_info=True)

    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                            )
                        ]
                    ]
                ),
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        init_db()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(
            lambda update, context: handle_error(update, context, context.error)
        )

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    main()
