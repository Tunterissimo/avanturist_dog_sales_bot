import time
import logging
import os
from contextlib import contextmanager
from functools import lru_cache
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
import gspread
from google.oauth2.service_account import Credentials
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime, timedelta

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
BOT_TOKEN = os.environ["BOT_TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
DATABASE_URL = os.environ["DATABASE_URL"]
CREDENTIALS_JSON = os.environ["CREDENTIALS"]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_TTL_SECONDS = 300  # 5 –º–∏–Ω—É—Ç

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Google Sheets
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
SHEET_NAME = "–ü—Ä–æ–¥–∞–∂–∏"
CATALOG_SHEET_NAME = "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"
CHANNELS_SHEET_NAME = "–ö–∞–Ω–∞–ª—ã"
REFERENCE_SHEET_NAME = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"
PAYMENT_METHODS_SHEET_NAME = "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
PRODUCT_TYPES_HEADER = "–¢–ò–ü–´ –¢–û–í–ê–†–û–í"
WIDTHS_HEADER = "–®–ò–†–ò–ù–´ –°–¢–†–û–ü"
COLOR_TYPES_HEADER = "–¢–ò–ü–´ –†–ê–°–¶–í–ï–¢–û–ö"
COLORS_HEADER = "–†–ê–°–¶–í–ï–¢–ö–ò"


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def clean_numeric_value(value):
    """–û—á–∏—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not value:
        return "0"

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —á–∏—Å—Ç–æ–µ —á–∏—Å–ª–æ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if isinstance(value, (int, float)):
        return str(value)

    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    cleaned = (
        value.replace("—Ä.", "").replace(" ", "").replace("\xa0", "").replace(",", ".")
    )
    return cleaned.strip()


def debug_catalog():
    """–í—ã–≤–æ–¥–∏—Ç –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()

        logger.info("üìã –í–°–ï –ó–ê–ü–ò–°–ò –í –ö–ê–¢–ê–õ–û–ì–ï –¢–û–í–ê–†–û–í:")
        for i, row in enumerate(all_data):
            if i == 0:  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {row}")
            else:
                if len(row) >= 8:
                    logger.info(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {row[:8]}")  # –ü–µ—Ä–≤—ã–µ 8 –∫–æ–ª–æ–Ω–æ–∫
                else:
                    logger.info(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {row} (–Ω–µ–ø–æ–ª–Ω–∞—è)")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


def check_catalog_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()

        logger.info("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ö–ê–¢–ê–õ–û–ì–ê:")
        if len(all_data) > 0:
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {all_data[0]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        for i in range(min(11, len(all_data))):
            row = all_data[i]
            if i == 0:
                logger.info("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:")
            else:
                logger.info(f"üìã –°—Ç—Ä–æ–∫–∞ {i}:")

            for col_idx, value in enumerate(row[:8]):  # –ü–µ—Ä–≤—ã–µ 8 –∫–æ–ª–æ–Ω–æ–∫
                logger.info(f"   –ö–æ–ª–æ–Ω–∫–∞ {col_idx}: '{value}'")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")


# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log"),
    ],
)
logger = logging.getLogger(__name__)


# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
@contextmanager
def get_db_connection():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    conn = None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode="require")
        logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        yield conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()


@contextmanager
def get_db_cursor():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –∫—É—Ä—Å–æ—Ä, –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
    with get_db_connection() as conn:
        cur = conn.cursor(cursor_factory=RealDictCursor)
        try:
            yield cur
            conn.commit()
        except Exception as e:
            conn.rollback()
            raise e
        finally:
            cur.close()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    try:
        with get_db_cursor() as cur:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute("DROP TABLE IF EXISTS user_states")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute(
                """
                CREATE TABLE user_states (
                    user_id BIGINT PRIMARY KEY,
                    channel VARCHAR(50),
                    product_type VARCHAR(50),
                    width VARCHAR(20),
                    size VARCHAR(20),
                    color_type VARCHAR(50),
                    color VARCHAR(50),
                    payment_method VARCHAR(50),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """
            )
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


# ==================== GOOGLE SHEETS ====================
# –ü–∞—Ä—Å–∏–º JSON credentials
credentials_info = json.loads(CREDENTIALS_JSON)


@lru_cache(maxsize=1)
def get_google_sheet_cached():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏—Å—Ç Google Sheets —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
        creds = Credentials.from_service_account_info(credentials_info, scopes=SCOPES)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)

        logger.info("‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return worksheet
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        raise


@lru_cache(maxsize=1)
def get_channels_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        sheet = get_google_sheet_cached()

        try:
            channels_sheet = sheet.spreadsheet.worksheet(CHANNELS_SHEET_NAME)
            logger.info("‚úÖ –õ–∏—Å—Ç '–ö–∞–Ω–∞–ª—ã' –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '–ö–∞–Ω–∞–ª—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return []

        all_data = channels_sheet.get_all_values()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –ª–∏—Å—Ç–∞ '–ö–∞–Ω–∞–ª—ã': {len(all_data)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        channels_data = all_data[1:] if len(all_data) > 1 else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_list = []
        for row in channels_data:
            if len(row) >= 2 and row[0] and row[1]:
                channels_list.append(row[1].strip())

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channels_list)} –∫–∞–Ω–∞–ª–æ–≤: {channels_list}")
        return channels_list

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []


@lru_cache(maxsize=1)
def get_payment_methods_from_sheet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã...")
        sheet = get_google_sheet_cached()

        try:
            payment_sheet = sheet.spreadsheet.worksheet(PAYMENT_METHODS_SHEET_NAME)
            logger.info("‚úÖ –õ–∏—Å—Ç '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return ["–ò–ü", "–ü–µ—Ä–µ–≤–æ–¥", "–ù–∞–ª–∏—á–Ω—ã–µ"]  # Fallback –∑–Ω–∞—á–µ–Ω–∏—è

        all_data = payment_sheet.get_all_values()
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –ª–∏—Å—Ç–∞ '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã': {len(all_data)}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        payment_data = all_data[1:] if len(all_data) > 1 else []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        payment_list = []
        for row in payment_data:
            if len(row) >= 2 and row[1]:  # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
                payment_list.append(row[1].strip())

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(payment_list)} —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {payment_list}")
        return payment_list

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        return ["–ò–ü", "–ü–µ—Ä–µ–≤–æ–¥", "–ù–∞–ª–∏—á–Ω—ã–µ"]  # Fallback –∑–Ω–∞—á–µ–Ω–∏—è


@lru_cache(maxsize=1)
def get_reference_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
        sheet = get_google_sheet_cached()

        try:
            ref_sheet = sheet.spreadsheet.worksheet(REFERENCE_SHEET_NAME)
            all_data = ref_sheet.get_all_values()
        except Exception as e:
            logger.error(f"‚ùå –õ–∏—Å—Ç '{REFERENCE_SHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return {}

        reference_data = {
            "product_types": [],
            "widths": [],
            "color_types": [],
            "colors": [],
        }

        current_section = None

        for row in all_data:
            if not any(row):
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
            if PRODUCT_TYPES_HEADER in row[0]:
                current_section = "product_types"
                continue
            elif WIDTHS_HEADER in row[0]:
                current_section = "widths"
                continue
            elif COLOR_TYPES_HEADER in row[0]:
                current_section = "color_types"
                continue
            elif COLORS_HEADER in row[0]:
                current_section = "colors"
                continue

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
            if current_section == "product_types" and len(row) >= 3:
                if row[0] and row[0] != "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    reference_data["product_types"].append(
                        {
                            "type": row[0].strip(),
                            "has_width": row[1].strip().lower() == "–¥–∞",
                            "has_size": row[2].strip().lower() == "–¥–∞",
                        }
                    )

            elif current_section == "widths" and len(row) >= 2:
                if row[0] and row[0] != "–®–∏—Ä–∏–Ω–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    available_sizes = (
                        [s.strip() for s in row[1].split(",")] if row[1] else []
                    )
                    reference_data["widths"].append(
                        {"width": row[0].strip(), "available_sizes": available_sizes}
                    )

            elif current_section == "color_types" and len(row) >= 2:
                if row[0] and row[0] != "–¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    available_colors = (
                        [c.strip() for c in row[1].split(",")] if row[1] else []
                    )
                    reference_data["color_types"].append(
                        {"type": row[0].strip(), "available_colors": available_colors}
                    )

            elif current_section == "colors" and row[0]:
                if row[0] != "–†–∞—Å—Ü–≤–µ—Ç–∫–∞":  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    reference_data["colors"].append(row[0].strip())

        logger.info(
            f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {len(reference_data['product_types'])} —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤, "
            f"{len(reference_data['widths'])} —à–∏—Ä–∏–Ω, {len(reference_data['color_types'])} —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫, "
            f"{len(reference_data['colors'])} —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫"
        )

        return reference_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
        return {}


def get_product_price_from_catalog(product_type, width, size, color_type, color):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    try:
        sheet = get_google_sheet_cached()
        catalog_sheet = sheet.spreadsheet.worksheet(CATALOG_SHEET_NAME)
        all_data = catalog_sheet.get_all_values()

        logger.info(
            f"üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω—ã –¥–ª—è: product_type='{product_type}', width='{width}', size='{size}', color_type='{color_type}', color='{color}'"
        )

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'None' –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if size == "None":
            size = ""
        if width == "None":
            width = ""

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
        def normalize(text):
            return str(text).lower().strip() if text else ""

        norm_product_type = normalize(product_type)
        norm_width = normalize(width)
        norm_size = normalize(size)
        norm_color_type = normalize(color_type)
        norm_color = normalize(color)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 8:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_product_type = normalize(row[2]) if len(row) > 2 else ""
            catalog_width = normalize(row[3]) if len(row) > 3 else ""
            catalog_size = normalize(row[4]) if len(row) > 4 else ""
            catalog_color_type = normalize(row[5]) if len(row) > 5 else ""
            catalog_color = normalize(row[6]) if len(row) > 6 else ""
            catalog_price = row[7].strip() if len(row) > 7 else ""

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(
                f"üìã –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º: '{catalog_product_type}', '{catalog_width}', '{catalog_size}', '{catalog_color_type}', '{catalog_color}'"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            type_match = catalog_product_type == norm_product_type
            width_match = (not norm_width) or (catalog_width == norm_width)
            size_match = (not norm_size) or (catalog_size == norm_size)
            color_type_match = catalog_color_type == norm_color_type
            color_match = catalog_color == norm_color

            logger.info(
                f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏—è: –¢–∏–ø={type_match}, –®–∏—Ä–∏–Ω–∞={width_match}, –†–∞–∑–º–µ—Ä={size_match}, –¢–∏–ø–†–∞—Å—Ü–≤–µ—Ç–∫–∏={color_type_match}, –†–∞—Å—Ü–≤–µ—Ç–∫–∞={color_match}"
            )

            if (
                type_match
                and width_match
                and size_match
                and color_type_match
                and color_match
                and catalog_price
            ):

                try:
                    price_value = float(clean_numeric_value(catalog_price))
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {price_value} —Ä—É–±.")
                    return price_value
                except ValueError:
                    logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã: '{catalog_price}'")
                    continue

        logger.warning("üîç –ü–æ–∏—Å–∫ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...")

        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞, —Ç–∏–ø—É —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 8:
                continue

            catalog_product_type = normalize(row[2]) if len(row) > 2 else ""
            catalog_color_type = normalize(row[5]) if len(row) > 5 else ""
            catalog_color = normalize(row[6]) if len(row) > 6 else ""
            catalog_price = row[7].strip() if len(row) > 7 else ""

            if (
                catalog_product_type == norm_product_type
                and catalog_color_type == norm_color_type
                and catalog_color == norm_color
                and catalog_price
            ):

                try:
                    price_value = float(clean_numeric_value(catalog_price))
                    logger.info(
                        f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {price_value} —Ä—É–±."
                    )
                    return price_value
                except ValueError:
                    continue

        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞ –∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ
        for i, row in enumerate(all_data[1:], start=2):
            if len(row) < 8:
                continue

            catalog_product_type = normalize(row[2]) if len(row) > 2 else ""
            catalog_color = normalize(row[6]) if len(row) > 6 else ""
            catalog_price = row[7].strip() if len(row) > 7 else ""

            if (
                catalog_product_type == norm_product_type
                and catalog_color == norm_color
                and catalog_price
            ):

                try:
                    price_value = float(clean_numeric_value(catalog_price))
                    logger.info(
                        f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É –∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–µ: {price_value} —Ä—É–±."
                    )
                    return price_value
                except ValueError:
                    continue

        logger.error("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é")

        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info("üìä –í–°–ï –ó–ê–ü–ò–°–ò –ö–ê–¢–ê–õ–û–ì–ê:")
        for i, row in enumerate(all_data):
            if i == 0:
                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {row}")
            elif len(row) >= 8:
                logger.info(
                    f"–°—Ç—Ä–æ–∫–∞ {i+1}: –¢–∏–ø='{row[2]}', –®–∏—Ä–∏–Ω–∞='{row[3]}', –†–∞–∑–º–µ—Ä='{row[4]}', –¢–∏–ø–†–∞—Å—Ü–≤–µ—Ç–∫–∏='{row[5]}', –†–∞—Å—Ü–≤–µ—Ç–∫–∞='{row[6]}', –¶–µ–Ω–∞='{row[7]}'"
                )

        return 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã: {e}", exc_info=True)
        return 0


def get_sales_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã"""
    try:
        sheet = get_google_sheet_cached()
        all_data = sheet.get_all_values()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        sales_data = []
        for row in all_data[1:]:
            if len(row) >= 11:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                sales_data.append({
                    'channel': row[0],
                    'product_type': row[1],
                    'width': row[2],
                    'size': row[3],
                    'color_type': row[4],
                    'color': row[5],
                    'quantity': int(row[6]) if row[6] and row[6].isdigit() else 0,
                    'price': float(clean_numeric_value(row[7])) if row[7] else 0,
                    'total_amount': float(clean_numeric_value(row[8])) if row[8] else 0,
                    'payment_method': row[9],
                    'date': row[10]
                })
        
        return sales_data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö: {e}")
        return []


def generate_channel_report(sales_data, period_days=30):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        cutoff_date = datetime.now() - timedelta(days=period_days)
        filtered_data = [
            sale for sale in sales_data 
            if sale['date'] and datetime.strptime(sale['date'], '%d.%m.%Y') >= cutoff_date
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channel_stats = {}
        for sale in filtered_data:
            channel = sale['channel']
            if channel not in channel_stats:
                channel_stats[channel] = {
                    'total_sales': 0,
                    'total_amount': 0,
                    'count': 0
                }
            
            channel_stats[channel]['total_sales'] += sale['quantity']
            channel_stats[channel]['total_amount'] += sale['total_amount']
            channel_stats[channel]['count'] += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_lines = [f"üìä *–û–¢–ß–ï–¢ –ü–û –ö–ê–ù–ê–õ–ê–ú –ü–†–û–î–ê–ñ (–∑–∞ {period_days} –¥–Ω–µ–π)*\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–±—â–µ–π —Å—É–º–º—ã
        sorted_channels = sorted(
            channel_stats.items(), 
            key=lambda x: x[1]['total_amount'], 
            reverse=True
        )
        
        for channel, stats in sorted_channels:
            report_lines.append(
                f"\nüìà *{channel}:*\n"
                f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {stats['count']}\n"
                f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats['total_sales']} —à—Ç.\n"
                f"   ‚Ä¢ –°—É–º–º–∞: {stats['total_amount']:,.2f} —Ä—É–±.\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['total_amount']/stats['count']:,.2f} —Ä—É–±."
            )
        
        # –ò—Ç–æ–≥–∏
        total_sales = sum(stats['total_sales'] for stats in channel_stats.values())
        total_amount = sum(stats['total_amount'] for stats in channel_stats.values())
        total_count = sum(stats['count'] for stats in channel_stats.values())
        
        report_lines.append(
            f"\nüí∞ *–ò–¢–û–ì–û:*\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_count}\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_sales} —à—Ç.\n"
            f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.\n"
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_amount/total_count:,.2f} —Ä—É–±." if total_count > 0 else "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 0 —Ä—É–±."
        )
        
        return "\n".join(report_lines)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"


def generate_product_report(sales_data, period_days=30):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        cutoff_date = datetime.now() - timedelta(days=period_days)
        filtered_data = [
            sale for sale in sales_data 
            if sale['date'] and datetime.strptime(sale['date'], '%d.%m.%Y') >= cutoff_date
        ]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        product_stats = {}
        for sale in filtered_data:
            product_type = sale['product_type']
            if product_type not in product_stats:
                product_stats[product_type] = {
                    'total_sales': 0,
                    'total_amount': 0,
                    'count': 0
                }
            
            product_stats[product_type]['total_sales'] += sale['quantity']
            product_stats[product_type]['total_amount'] += sale['total_amount']
            product_stats[product_type]['count'] += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_lines = [f"üì¶ *–û–¢–ß–ï–¢ –ü–û –¢–ò–ü–ê–ú –¢–û–í–ê–†–û–í (–∑–∞ {period_days} –¥–Ω–µ–π)*\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–±—â–µ–π —Å—É–º–º—ã
        sorted_products = sorted(
            product_stats.items(), 
            key=lambda x: x[1]['total_amount'], 
            reverse=True
        )
        
        for product_type, stats in sorted_products:
            report_lines.append(
                f"\nüè∑Ô∏è *{product_type}:*\n"
                f"   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {stats['count']}\n"
                f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {stats['total_sales']} —à—Ç.\n"
                f"   ‚Ä¢ –°—É–º–º–∞: {stats['total_amount']:,.2f} —Ä—É–±.\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['total_amount']/stats['total_sales']:,.2f} —Ä—É–±." if stats['total_sales'] > 0 else "   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: 0 —Ä—É–±."
            )
        
        # –ò—Ç–æ–≥–∏
        total_sales = sum(stats['total_sales'] for stats in product_stats.values())
        total_amount = sum(stats['total_amount'] for stats in product_stats.values())
        total_count = sum(stats['count'] for stats in product_stats.values())
        
        report_lines.append(
            f"\nüí∞ *–ò–¢–û–ì–û:*\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_count}\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_sales} —à—Ç.\n"
            f"   ‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.\n"
            f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {total_amount/total_count:,.2f} —Ä—É–±." if total_count > 0 else "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 0 —Ä—É–±."
        )
        
        return "\n".join(report_lines)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def sales_channels_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø—Ä–æ–¥–∞–∂ –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã"""
    try:
        channels = get_channels_from_sheet()
        keyboard = []

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(channels), 2):
            row = []
            row.append(InlineKeyboardButton(channels[i], callback_data=channels[i]))

            if i + 1 < len(channels):
                row.append(
                    InlineKeyboardButton(channels[i + 1], callback_data=channels[i + 1])
                )

            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        return InlineKeyboardMarkup(keyboard)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def product_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for product_type in ref_data["product_types"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        product_type["type"],
                        callback_data=f"type_{product_type['type']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def widths_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —à–∏—Ä–∏–Ω–∞–º–∏ —Å—Ç—Ä–æ–ø"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for width_data in ref_data["widths"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        width_data["width"],
                        callback_data=f"width_{width_data['width']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —à–∏—Ä–∏–Ω: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def sizes_keyboard(selected_width):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        width_data = next(
            (w for w in ref_data["widths"] if w["width"] == selected_width), None
        )

        if width_data:
            for size in width_data["available_sizes"]:
                keyboard.append(
                    [InlineKeyboardButton(size, callback_data=f"size_{size}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def color_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for color_type in ref_data["color_types"]:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        color_type["type"],
                        callback_data=f"colortype_{color_type['type']}",
                    )
                ]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def colors_keyboard(selected_color_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        color_type_data = next(
            (ct for ct in ref_data["color_types"] if ct["type"] == selected_color_type),
            None,
        )

        if color_type_data:
            for color in color_type_data["available_colors"]:
                keyboard.append(
                    [InlineKeyboardButton(color, callback_data=f"color_{color}")]
                )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def all_colors_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∞–º–∏ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –õ–µ–∂–∞–Ω–∫–∞ –∏ –ë—É—Å—ã)"""
    try:
        ref_data = get_reference_data()
        keyboard = []

        for color in ref_data["colors"]:
            keyboard.append(
                [InlineKeyboardButton(color, callback_data=f"color_{color}")]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Å–µ—Ö —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫: {e}")
        return InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        )


def payment_methods_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
    try:
        payment_methods = get_payment_methods_from_sheet()
        keyboard = []

        for method in payment_methods:
            keyboard.append(
                [InlineKeyboardButton(method, callback_data=f"payment_{method}")]
            )

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        return InlineKeyboardMarkup(keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–ò–ü", callback_data="payment_–ò–ü")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥", callback_data="payment_–ü–µ—Ä–µ–≤–æ–¥")],
            [InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ", callback_data="payment_–ù–∞–ª–∏—á–Ω—ã–µ")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        return InlineKeyboardMarkup(keyboard)


def report_types_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–æ–¥–∞–∂", callback_data="report_channels")],
        [InlineKeyboardButton("üì¶ –ü–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤", callback_data="report_products")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.message.from_user.first_name
    help_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–æ–¥–∞–∂.

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report
"""
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def add_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    user_id = update.message.from_user.id

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        with get_db_cursor() as cur:
            cur.execute(
                "DELETE FROM user_states WHERE user_id = %s",
                (user_id,),
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂
    await update.message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂:",
        reply_markup=sales_channels_keyboard(),
    )


async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    await update.message.reply_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=report_types_keyboard(),
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ====================
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    callback_data = query.data

    logger.info(f"üì® Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {callback_data}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    if callback_data == "cancel":
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    "DELETE FROM user_states WHERE user_id = %s",
                    (user_id,),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂
    if not callback_data.startswith(("type_", "width_", "size_", "colortype_", "color_", "payment_", "report_")):
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO user_states (user_id, channel)
                    VALUES (%s, %s)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET channel = EXCLUDED.channel
                    """,
                    (user_id, callback_data),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await query.edit_message_text(
            f"üìä –ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂: {callback_data}\n\nüè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=product_types_keyboard(),
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
    if callback_data.startswith("type_"):
        product_type = callback_data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "type_"

        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    UPDATE user_states 
                    SET product_type = %s
                    WHERE user_id = %s
                    """,
                    (product_type, user_id),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        ref_data = get_reference_data()
        product_info = next(
            (p for p in ref_data["product_types"] if p["type"] == product_type), None
        )

        if product_info and product_info["has_width"]:
            await query.edit_message_text(
                f"üè∑Ô∏è –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {product_type}\n\nüìè –í—ã–±–µ—Ä–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–ø—ã:",
                reply_markup=widths_keyboard(),
            )
        else:
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —à–∏—Ä–∏–Ω—ã (–õ–µ–∂–∞–Ω–∫–∞, –ë—É—Å—ã) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∏ —Ä–∞–∑–º–µ—Ä–∞
            try:
                with get_db_cursor() as cur:
                    cur.execute(
                        """
                        UPDATE user_states 
                        SET width = 'None', size = 'None'
                        WHERE user_id = %s
                        """,
                        (user_id,),
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            await query.edit_message_text(
                f"üè∑Ô∏è –¢–∏–ø —Ç–æ–≤–∞—Ä–∞: {product_type}\n\nüé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:",
                reply_markup=color_types_keyboard(),
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ä–∏–Ω—ã
    if callback_data.startswith("width_"):
        width = callback_data[6:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "width_"

        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    UPDATE user_states 
                    SET width = %s
                    WHERE user_id = %s
                    """,
                    (width, user_id),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await query.edit_message_text(
            f"üìè –®–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–ø—ã: {width}\n\nüìê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
            reply_markup=sizes_keyboard(width),
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
    if callback_data.startswith("size_"):
        size = callback_data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "size_"

        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    UPDATE user_states 
                    SET size = %s
                    WHERE user_id = %s
                    """,
                    (size, user_id),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await query.edit_message_text(
            f"üìê –†–∞–∑–º–µ—Ä: {size}\n\nüé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏:",
            reply_markup=color_types_keyboard(),
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
    if callback_data.startswith("colortype_"):
        color_type = callback_data[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "colortype_"

        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    UPDATE user_states 
                    SET color_type = %s
                    WHERE user_id = %s
                    """,
                    (color_type, user_id),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    "SELECT product_type FROM user_states WHERE user_id = %s",
                    (user_id,),
                )
                user_state = cur.fetchone()
                product_type = user_state["product_type"] if user_state else None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –î–ª—è –õ–µ–∂–∞–Ω–∫–∏ –∏ –ë—É—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
        if product_type in ["–õ–µ–∂–∞–Ω–∫–∞", "–ë—É—Å—ã"]:
            await query.edit_message_text(
                f"üé® –¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏: {color_type}\n\nüåà –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É:",
                reply_markup=all_colors_keyboard(),
            )
        else:
            await query.edit_message_text(
                f"üé® –¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏: {color_type}\n\nüåà –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫—É:",
                reply_markup=colors_keyboard(color_type),
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏
    if callback_data.startswith("color_"):
        color = callback_data[6:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "color_"

        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    UPDATE user_states 
                    SET color = %s
                    WHERE user_id = %s
                    """,
                    (color, user_id),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await query.edit_message_text(
            f"üåà –†–∞—Å—Ü–≤–µ—Ç–∫–∞: {color}\n\nüí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_methods_keyboard(),
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    if callback_data.startswith("payment_"):
        payment_method = callback_data[8:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "payment_"

        try:
            with get_db_cursor() as cur:
                cur.execute(
                    """
                    UPDATE user_states 
                    SET payment_method = %s
                    WHERE user_id = %s
                    """,
                    (payment_method, user_id),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    "SELECT * FROM user_states WHERE user_id = %s",
                    (user_id,),
                )
                user_state = cur.fetchone()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        if user_state:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
            price = get_product_price_from_catalog(
                user_state["product_type"],
                user_state["width"],
                user_state["size"],
                user_state["color_type"],
                user_state["color"],
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
            context.user_data["current_price"] = price

            await query.edit_message_text(
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price:,.2f} —Ä—É–±.\n\n"
                f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:"
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    if callback_data.startswith("report_"):
        report_type = callback_data[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "report_"
        
        sales_data = get_sales_data()
        
        if report_type == "channels":
            report_text = generate_channel_report(sales_data)
        elif report_type == "products":
            report_text = generate_product_report(sales_data)
        else:
            report_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞"
        
        await query.edit_message_text(report_text, parse_mode="Markdown")
        return


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================
async def handle_quantity_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    user_id = update.message.from_user.id
    quantity_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        quantity = int(quantity_text)
        if quantity <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    try:
        with get_db_cursor() as cur:
            cur.execute(
                "SELECT * FROM user_states WHERE user_id = %s",
                (user_id,),
            )
            user_state = cur.fetchone()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    if not user_state:
        await update.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /add.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    price = context.user_data.get("current_price", 0)
    total_amount = price * quantity

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
    try:
        sheet = get_google_sheet_cached()
        current_date = datetime.now().strftime("%d.%m.%Y")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [
            user_state["channel"],
            user_state["product_type"],
            user_state["width"] if user_state["width"] else "",
            user_state["size"] if user_state["size"] else "",
            user_state["color_type"],
            user_state["color"],
            str(quantity),
            str(price),
            str(total_amount),
            user_state["payment_method"],
            current_date,
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        sheet.append_row(row_data)

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É: {row_data}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = f"""
‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üìä –ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂: {user_state['channel']}
üè∑Ô∏è –¢–æ–≤–∞—Ä: {user_state['product_type']}
üìè –®–∏—Ä–∏–Ω–∞: {user_state['width'] if user_state['width'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìê –†–∞–∑–º–µ—Ä: {user_state['size'] if user_state['size'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üé® –¢–∏–ø —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏: {user_state['color_type']}
üåà –†–∞—Å—Ü–≤–µ—Ç–∫–∞: {user_state['color']}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {user_state['payment_method']}
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.
üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price:,.2f} —Ä—É–±.
üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} —Ä—É–±.
üìÖ –î–∞—Ç–∞: {current_date}
"""

        await update.message.reply_text(success_message, parse_mode="Markdown")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with get_db_cursor() as cur:
                cur.execute(
                    "DELETE FROM user_states WHERE user_id = %s",
                    (user_id,),
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /add."
        )


# ==================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_entry))
    application.add_handler(CommandHandler("report", generate_report))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quantity_input)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()